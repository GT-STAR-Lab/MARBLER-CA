#Arguments needed by main.py
scenario: PredatorCapturePreyGNN #name of the folder inside scenarios

model_config_file: config.json
model_file: agent.th

actor_file: gnn_agent
actor_class: GNNAgent

env_file: PredatorCapturePreyGNN
env_class: PredatorCapturePreyGNN #This needs to have all of the functionalities of a gym to work
n_actions: 5 #The number of actions available for the agent
n_agents: 4
episodes: 10 #Number of episodes to run for
shared_reward: True

#Arguments needed by the environment
show_figure_frequency: -1 #Set to -1 to turn off figures. Needs to be 1 when submitting to Robotarium
robotarium: False #Should be False during training to speed up robots, needs to be true when submitting
real_time: False
seed: 100
barrier_certificate: default #Can be safe or default for strong or weak barrier certificates
penalize_violations: True # violation=robot collision w/ each other or boundary, does not terminate early
end_ep_on_violation: True
violation_penalty: -0.05
delta: -1 #Used to determine the adjacency matrix, set to -1 for full communication
max_episode_steps: 80
terminate_on_success: True # If true, then when the number of prey is zero, the environment will terminate. Else environment keeps running.
update_frequency: 29
step_dist : 0.2 #This should probably be renamed. This is actually the amount of distance the robots move per time step...
start_dist: 0.3 #Minimum distance the agents start from each other

#The follow four arguments are the boundaries in the Robotarium that the robots are allowed to traverse to
LEFT: -1.4
RIGHT: 1.4
UP: -0.9
DOWN: .9
ROBOT_INIT_RIGHT_THRESH : -0.5
PREY_INIT_LEFT_THRESH : 0.5
time_penalty: -0.05
sense_reward: 1
capture_reward: 5
num_prey: 4
test: False #Set this to change the agents that are being selected from
#If the following two are False, make sure resample is also False
capability_aware: True #Either the agent know what class they're in or their capabilities. Make sure this matches training
dual_channel: False #Changes the observations to make them a 2d array for capabilities and observations if capability_aware is true
class_id: False #If capability_aware is False, this determines if the class id is appended instead or not

#Information needed to generate the predefined agents and coalitions
n_capture_agents: 25
n_predator_agents: 25
n_test_capture_agents: 25
n_test_predator_agents: 25
n_coalitions: 10

traits:
  predator:
    distribution: 'uniform'
    low: 0.2
    high: 0.6
  capture:
    distribution: 'uniform'
    low: 0.05
    high: 0.25

# manual select coalitions
manual_coalition_selection: True
coalition_selection: 4

# traits:
#   predator:
#     distribution: 'normal'
#     loc: .4
#     scale: .1
#   capture:
#     distribution: 'normal'
#     loc: .25
#     scale: .05
resample: False #Set to true to resample the agents every episode
hard_coded_coalition: False
